version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION}
    container_name: zookeeper_docker
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
    volumes:
      - zookeeper_data:/var/lib/zookeeper

  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    container_name: kafka_docker
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}"
      - "${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:${KAFKA_EXTERNAL_PORT},PLAINTEXT_INTERNAL://kafka:${KAFKA_INTERNAL_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka

  mysqldb:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql_docker
    restart: always
    ports:
      - "${MYSQL_PORT_HOST}:${MYSQL_PORT_CONTAINER}"
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql

  book-api:
    image: ${SPRING_BOOT_IMAGE}
    container_name: bookapi_docker
    depends_on:
      - kafka
      - mysqldb
    ports:
      - "${APP_PORT_HOST}:${APP_PORT_CONTAINER}"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysqldb:${MYSQL_PORT_CONTAINER}/${MYSQL_DATABASE}
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:${KAFKA_INTERNAL_PORT}

volumes:
  mysql_data:
  kafka_data:
  zookeeper_data:
